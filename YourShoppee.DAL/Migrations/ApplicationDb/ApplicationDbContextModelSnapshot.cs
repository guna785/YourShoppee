// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using YourShoppee.DAL.Context;

namespace YourShoppee.DAL.Migrations.ApplicationDb
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 64)
                .HasAnnotation("ProductVersion", "5.0.11");

            modelBuilder.Entity("YourShoppee.Models.Models.Catergory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("ProductGroupId")
                        .HasColumnType("int");

                    b.Property<DateTime>("createdAt")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("ProductGroupId");

                    b.ToTable("Catergory");
                });

            modelBuilder.Entity("YourShoppee.Models.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int?>("CatergoryId")
                        .HasColumnType("int");

                    b.Property<string>("Discription")
                        .HasColumnType("text");

                    b.Property<int>("Mrp")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("ProductGroupId")
                        .HasColumnType("int");

                    b.Property<int>("ProductTypeId")
                        .HasColumnType("int");

                    b.Property<int>("Qty")
                        .HasColumnType("int");

                    b.Property<int>("UnitId")
                        .HasColumnType("int");

                    b.Property<DateTime>("createdAt")
                        .HasColumnType("datetime");

                    b.Property<int>("status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CatergoryId");

                    b.HasIndex("ProductGroupId");

                    b.HasIndex("ProductTypeId");

                    b.HasIndex("UnitId");

                    b.ToTable("Product");
                });

            modelBuilder.Entity("YourShoppee.Models.Models.ProductGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<DateTime>("createdAt")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.ToTable("ProductGroup");
                });

            modelBuilder.Entity("YourShoppee.Models.Models.ProductType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("ProductGroupId")
                        .HasColumnType("int");

                    b.Property<DateTime>("createdAt")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ProductGroupId");

                    b.ToTable("ProductType");
                });

            modelBuilder.Entity("YourShoppee.Models.Models.Unit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<DateTime>("createdAt")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.ToTable("Unit");
                });

            modelBuilder.Entity("YourShoppee.Models.Models.Catergory", b =>
                {
                    b.HasOne("YourShoppee.Models.Models.ProductGroup", "productGroup")
                        .WithMany("Catergories")
                        .HasForeignKey("ProductGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("productGroup");
                });

            modelBuilder.Entity("YourShoppee.Models.Models.Product", b =>
                {
                    b.HasOne("YourShoppee.Models.Models.Catergory", null)
                        .WithMany("Products")
                        .HasForeignKey("CatergoryId");

                    b.HasOne("YourShoppee.Models.Models.ProductGroup", null)
                        .WithMany("Products")
                        .HasForeignKey("ProductGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("YourShoppee.Models.Models.ProductType", null)
                        .WithMany("Products")
                        .HasForeignKey("ProductTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("YourShoppee.Models.Models.Unit", "unit")
                        .WithMany("Products")
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("unit");
                });

            modelBuilder.Entity("YourShoppee.Models.Models.ProductType", b =>
                {
                    b.HasOne("YourShoppee.Models.Models.Catergory", "category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("YourShoppee.Models.Models.ProductGroup", "productGroup")
                        .WithMany("ProductTypes")
                        .HasForeignKey("ProductGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("category");

                    b.Navigation("productGroup");
                });

            modelBuilder.Entity("YourShoppee.Models.Models.Catergory", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("YourShoppee.Models.Models.ProductGroup", b =>
                {
                    b.Navigation("Catergories");

                    b.Navigation("Products");

                    b.Navigation("ProductTypes");
                });

            modelBuilder.Entity("YourShoppee.Models.Models.ProductType", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("YourShoppee.Models.Models.Unit", b =>
                {
                    b.Navigation("Products");
                });
#pragma warning restore 612, 618
        }
    }
}
